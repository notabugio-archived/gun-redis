!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("redis"),require("flat")):"function"==typeof define&&define.amd?define("@notabug/gun-redis",["ramda","redis","flat"],t):"object"==typeof exports?exports["@notabug/gun-redis"]=t(require("ramda"),require("redis"),require("flat")):e["@notabug/gun-redis"]=t(e.ramda,e.redis,e.flat)}("undefined"!=typeof self?self:this,function(e,t,r){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(t,r){t.exports=e},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createClient=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(4),i=r(5);var u=/^_\..*/,c=/(\.#$)/;t.createClient=function(e){for(var t=[],r=arguments.length,f=new Array(r>1?r-1:0),a=1;a<r;a++)f[a-1]=arguments[a];var l=o.createClient.apply(void 0,f),s=function(e){return new Promise(function(t,r){if(!e)return t(null);l.hgetall(e,function(e,n){e?(console.error("get error",e),r(e)):t((0,i.fromRedis)(n))})})};return{get:s,read:function(t){return s(t).then(function(r){var o=r?{...r}:r;return e.SEA&&-1!==t.indexOf("~")?(n.without(["_"],n.keys(o)).forEach(function(n){e.SEA.verify(e.SEA.opt.pack(r[n],n,r,t),!1,function(t){return o[n]=e.SEA.opt.unpack(t,n,r)})}),o):r})},batchedGet:function(e,t){return new Promise(function(r,n){l.hkeys(e,function(o,f){if(o)return console.error("error",o.stack||o),n(o);if(f.length<=1e4)return s(e).then(function(e){t(e),r(e)});console.log("get big soul",e,f.length);var a=f.filter(function(e){return!e.match(u)}),p=function(){return new Promise(function(r,n){var o=a.splice(0,1e4);return o.length?function(e,t){return new Promise(function(r,n){var o=t.map(function(e){return"_.>.".concat(e).replace(c,"")});return l.hmget(e,o,function(u,c){if(u)return console.error("hmget err",u.stack||u)||n(u);var f={"_.#":e};return c.forEach(function(e,t){return f[o[t]]=e}),l.hmget(e,t,function(e,o){return e?console.error("hmget err",e.stack||e)||n(e):(o.forEach(function(e,r){return f[t[r]]=e}),r((0,i.fromRedis)(f)))})})})}(e,o).then(function(e){return t(e),r()},n):r(!0)})};return function e(){return p().then(function(t){return!t&&e})}().then(function(e){r(e)}).catch(n)})})},write:function(e){return Promise.all(n.keys(e).map(function(r){return new Promise(function(o,u){var c=e[r],f=n.path(["_",">"],c)||{},a=n.keys(f);return function e(){var p=a.splice(0,1e4);if(!p.length)return o();var d={_:{"#":r,">":n.pick(p,f)},...n.pick(p,c)};return s(r).then(function(o){var c=p.filter(function(e){var t=n.prop(e,d),r=n.prop(e,o);if(!(e in d))return!1;if(t===r)return!1;var i=n.path([e,"#"],d),u=n.path([e,"#"],o);return!((i||u)&&i===u||"number"==typeof t&&parseFloat(r)===t)});if(!c.length)return e();var a={_:n.assoc(">",n.pick(c,f),d._),...n.pick(c,d)};return l.hmset(r,(0,i.toRedis)(a),function(n){n?u(n):e(),function(e,r,n){t.map(function(t){return t(e,r,n)})}(r,a,o)})})}()})}))},onChange:function(e){return t.push(e)},offChange:function(e){return t=n.without([e],t)},redis:l}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"attachToGun",{enumerable:!0,get:function(){return o.attachToGun}}),Object.defineProperty(t,"createClient",{enumerable:!0,get:function(){return i.createClient}}),t.receiver=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(3)),o=r(7),i=r(1);var u=n;t.receiver=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.acceptWrites=t.respondToGets=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(0)),o=r(1);t.respondToGets=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.disableRelay,i=void 0===r||r,u=t.skipValidation,c=void 0===u||u;return function(t){var r=e.redis=e.redis||(0,o.createClient)(e);return t.onIn(function(e){var t=e.from,o=e.json,u=e.fromCluster,f=n.path(["get","#"],o),a=n.prop("#",o);return!f||u?e:r.batchedGet(f,function(e){var r,n,o,i={"#":t.msgId(),"@":a,put:e?(r={},n=f,o=e,n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,r):null};t.send({json:i,ignoreLeeching:!0,skipValidation:!e||c})}).then(function(){return i?n.assoc("noRelay",!0,e):e}).catch(function(r){var n={"#":t.msgId(),"@":a,err:"".concat(r)};return t.send({json:n,ignoreLeeching:!0,skipValidation:c}),e})}),t}};t.acceptWrites=function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).disableRelay,r=void 0!==t&&t;return function(t){var i=e.redis=e.redis||(0,o.createClient)(e);return t.onIn(function(e){return e.fromCluster?e:e.json.put?t.getDiff(e.json.put).then(function(t){return n.keys(t).length?i.write(t).then(function(){var t={"@":e.json["#"],ok:!0,err:null};return e.from&&e.from.send&&e.from.send({json:t,noRelay:!0,ignoreLeeching:!0,skipValidation:!0}),r?n.assoc("noRelay",!0,e):e}).catch(function(t){var n={"@":e.json["#"],ok:!1,err:"".concat(t)};return e.from&&e.from.send&&e.from.send({json:n,noRelay:r,ignoreLeeching:!0,skipValidation:!0}),e}):e}).catch(function(e){return console.error("error accepting writes",e.stack||e)}):e}),t}}},function(e,r){e.exports=t},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromRedis=function(e){if(!e)return e;var t={};return(0,n.keys)(e).forEach(function(t){"."===t[0]&&delete e[t],"|NULL|"===e[t]&&(e[t]=null),"|UNDEFINED|"===e[t]&&(e[t]=void 0),/>\./.test(t)&&(e[t]=parseFloat(e[t],10)||e[t]),e[t]&&e[t].length>u&&(e[t]=e[t].slice(0,u),console.log("truncated",t))}),e=c(i.unflatten(e,{object:!0})),Object.keys(e).sort().forEach(function(r){return t[r]=e[r]}),t},t.toRedis=function(e){return e?(e=i(c(e)),(0,n.keys)(e).forEach(function(t){null===e[t]&&(e[t]="|NULL|"),void 0===o(e[t])&&(e[t]="|UNDEFINED|"),e[t]&&e[t].length>u&&(e[t]=e[t].slice(0,u),console.log("truncated input",t)),"."===t[0]&&delete e[t]}),e):e};var n=r(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(6),u=1e5;function c(e){if(!e)return e;var t=e._&&e._[">"]||{};return(0,n.keys)(t).forEach(function(r){if(r in e){var i=t[r];if("object"===o(i)){var u=(0,n.keys)(i),c=u[0];if(c){var f=[r,u].join("."),a=i[c];delete t[r],t[f]=a,a=e[r]&&e[r][c]||null,delete e[r],e[f]=a}}}else delete t[r]}),(0,n.keys)(e).forEach(function(r){r[0],"_"!==r&&(r in t||delete e[r])}),e}},function(e,t){e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.attachToGun=void 0;var n=r(1);t.attachToGun=function(e){return e.on("create",function(t){this.to.next(t);var r=e.redis=t.redis=(0,n.createClient)(e);t.on("get",function(e){this.to.next(e);var n=e["#"],o=e.get["#"];r.batchedGet(o,function(e){return t.on("in",{"@":n,put:e?(r={},i=o,u=e,i in r?Object.defineProperty(r,i,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[i]=u,r):null,err:null});var r,i,u}).catch(function(e){return console.error("error",e.stack||e)||t.on("in",{"@":n,put:null,err:e})})}),t.on("put",function(e){this.to.next(e);var n=e["#"];r.write(e.put).then(function(){return t.on("in",{"@":n,ok:!0,err:null})}).catch(function(e){return t.on("in",{"@":n,ok:!1,err:e})})})})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,