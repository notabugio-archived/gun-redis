!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("ramda"),require("redis"),require("flat")):"function"==typeof define&&define.amd?define("gun-redis",["ramda","redis","flat"],r):"object"==typeof exports?exports["gun-redis"]=r(require("ramda"),require("redis"),require("flat")):e["gun-redis"]=r(e.ramda,e.redis,e.flat)}("undefined"!=typeof self?self:this,function(e,r,t){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=2)}([function(r,t){r.exports=e},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.createClient=void 0;var n=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(0)),o=t(4),i=t(5);var u=/^_\..*/,c=/(\.#$)/;r.createClient=function(e){for(var r=[],t=arguments.length,f=new Array(t>1?t-1:0),a=1;a<t;a++)f[a-1]=arguments[a];var l=o.createClient.apply(void 0,f),s=function(e){return r.push(e)},p=function(e){return new Promise(function(r,t){if(!e)return r(null);l.hgetall(e,function(e,n){e?(console.error("get error",e),t(e)):r((0,i.fromRedis)(n))})})};return s(function(e,r){return console.log("modify",e,n.keys(r))}),{get:p,read:function(r){return p(r).then(function(t){var o=t?{...t}:t;return e.SEA&&-1!==r.indexOf("~")?(n.without(["_"],n.keys(o)).forEach(function(n){e.SEA.verify(e.SEA.opt.pack(t[n],n,t,r),!1,function(r){return o[n]=e.SEA.opt.unpack(r,n,t)})}),o):t})},batchedGet:function(e,r){return new Promise(function(t,n){l.hkeys(e,function(o,f){if(o)return console.error("error",o.stack||o),n(o);if(f.length<=1e4)return p(e).then(function(e){r(e),t(e)});console.log("get big soul",e,f.length);var a=f.filter(function(e){return!e.match(u)}),s=function(){return new Promise(function(t,n){var o=a.splice(0,1e4);return o.length?function(e,r){return new Promise(function(t,n){var o=r.map(function(e){return"_.>.".concat(e).replace(c,"")});return l.hmget(e,o,function(u,c){if(u)return console.error("hmget err",u.stack||u)||n(u);var f={"_.#":e};return c.forEach(function(e,r){return f[o[r]]=e}),l.hmget(e,r,function(e,o){return e?console.error("hmget err",e.stack||e)||n(e):(o.forEach(function(e,t){return f[r[t]]=e}),t((0,i.fromRedis)(f)))})})})}(e,o).then(function(e){return r(e),t()},n):t(!0)})};return function e(){return s().then(function(r){return!r&&e})}().then(function(e){t(e)}).catch(n)})})},write:function(e){return Promise.all(n.keys(e).map(function(t){return new Promise(function(o,u){var c=e[t],f=n.path(["_",">"],c)||{},a=n.keys(f);return function e(){var s=a.splice(0,1e4);if(!s.length)return o();var d={_:{"#":t,">":n.pick(s,f)},...n.pick(s,c)};return p(t).then(function(o){var c=s.filter(function(e){var r=n.prop(e,d),t=n.prop(e,o);if(r===t)return!1;var i=n.path([e,"#"],d),u=n.path([e,"#"],o);return!((i||u)&&i===u||"number"==typeof r&&parseFloat(t)===r)});if(!c.length)return e();var a={_:n.assoc(">",n.pick(c,f),d._),...n.pick(c,d)};return l.hmset(t,(0,i.toRedis)(a),function(n){n?u(n):e(),function(e,t){r.map(function(r){return r(e,t)})}(t,a)})})}()})}))},onChange:s,offChange:function(e){return r=n.without([e],r)}}}},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"attachToGun",{enumerable:!0,get:function(){return o.attachToGun}}),r.receiver=void 0;var n=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(3)),o=t(7);var i=n;r.receiver=i},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.acceptWrites=r.respondToGets=void 0;var n=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(0)),o=t(1);r.respondToGets=function(e){var r=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).skipValidation,t=void 0===r||r;return function(r){var i=e.redis=e.redis||(0,o.createClient)(e);return r.onIn(function(e){var r=e.from,o=e.json,u=e.fromCluster,c=n.path(["get","#"],o),f=n.prop("#",o);return!c||u?e:i.batchedGet(c,function(e){var n,o,i,u={"#":r.msgId(),"@":f,put:e?(n={},o=c,i=e,o in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i,n):null};r.send({json:u,ignoreLeeching:!0,skipValidation:!e||t})}).catch(function(e){var n={"#":r.msgId(),"@":f,err:"".concat(e)};r.send({json:n,ignoreLeeching:!0,skipValidation:t})}).then(function(){return e})}),r}};r.acceptWrites=function(e){return function(r){var t=e.redis=e.redis||(0,o.createClient)(e);return r.onIn(function(e){return e.fromCluster?e:e.json.put?r.getDiff(e.json.put).then(function(r){return n.keys(r).length?t.write(r).then(function(){var r={"@":e.json["#"],ok:!0,err:null};return e.from&&e.from.send&&e.from.send({json:r,ignoreLeeching:!0,skipValidation:!0}),e}).catch(function(r){var t={"@":e.json["#"],ok:!1,err:"".concat(r)};return e.from&&e.from.send&&e.from.send({json:t,ignoreLeeching:!0,skipValidation:!0}),e}):e}).catch(function(e){return console.error("error accepting writes",e.stack||e)}):e}),r}}},function(e,t){e.exports=r},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.fromRedis=function(e){if(!e)return e;var r={};return(0,n.keys)(e).forEach(function(r){"."===r[0]&&delete e[r],"|NULL|"===e[r]&&(e[r]=null),"|UNDEFINED|"===e[r]&&(e[r]=void 0),/>\./.test(r)&&(e[r]=parseFloat(e[r],10)||e[r]),e[r]&&e[r].length>u&&(e[r]=e[r].slice(0,u),console.log("truncated",r))}),e=function(e){if(!e)return e;var r=e._&&e._[">"]||{};return(0,n.keys)(r).forEach(function(t){var i=r[t];if("object"===o(i)){var u=(0,n.keys)(i),c=u[0];if(c){var f=[t,u].join("."),a=i[c];delete r[t],r[f]=a,a=e[t]&&e[t][c]||null,delete e[t],e[f]=a}}}),(0,n.keys)(e).forEach(function(e){e[0]}),e}(i.unflatten(e)),Object.keys(e).sort().forEach(function(t){return r[t]=e[t]}),r},r.toRedis=function(e){return e?(e=i(e),(0,n.keys)(e).forEach(function(r){null===e[r]&&(e[r]="|NULL|"),void 0===o(e[r])&&(e[r]="|UNDEFINED|"),e[r]&&e[r].length>u&&(e[r]=e[r].slice(0,u),console.log("truncated input",r)),"."===r[0]&&delete e[r]}),e):e};var n=t(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=t(6),u=1e5},function(e,r){e.exports=t},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.attachToGun=void 0;var n=t(1);r.attachToGun=function(e){return e.on("create",function(r){this.to.next(r);var t=e.redis=r.redis=(0,n.createClient)(e);r.on("get",function(e){this.to.next(e);var n=e["#"],o=e.get["#"];t.batchedGet(o,function(e){return r.on("in",{"@":n,put:e?(t={},i=o,u=e,i in t?Object.defineProperty(t,i,{value:u,enumerable:!0,configurable:!0,writable:!0}):t[i]=u,t):null,err:null});var t,i,u}).catch(function(e){return console.error("error",e.stack||e)||r.on("in",{"@":n,put:null,err:e})})}),r.on("put",function(e){this.to.next(e);var n=e["#"];t.write(e.put).then(function(){return r.on("in",{"@":n,ok:!0,err:null})}).catch(function(e){return r.on("in",{"@":n,ok:!1,err:e})})})})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ndW4tcmVkaXMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2d1bi1yZWRpcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ndW4tcmVkaXMvZXh0ZXJuYWwgXCJyYW1kYVwiIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vZ3VuLXJlZGlzLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9yZWNlaXZlci5qcyIsIndlYnBhY2s6Ly9ndW4tcmVkaXMvZXh0ZXJuYWwgXCJyZWRpc1wiIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9zZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vZ3VuLXJlZGlzL2V4dGVybmFsIFwiZmxhdFwiIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9ndW4uanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNl9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlIiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWRpcyIsIl9zZXJpYWxpemUiLCJtZXRhUmUiLCJlZGdlUmUiLCJHdW4iLCJjaGFuZ2VTdWJzY3JpYmVycyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJjb25maWciLCJBcnJheSIsIl9rZXkiLCJyZWRpcyIsImNyZWF0ZUNsaWVudCIsImFwcGx5Iiwib25DaGFuZ2UiLCJmbiIsInB1c2giLCJzb3VsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJoZ2V0YWxsIiwiZXJyIiwicmVzIiwiY29uc29sZSIsImVycm9yIiwiZnJvbVJlZGlzIiwiZGlmZiIsImxvZyIsImtleXMiLCJyZWFkIiwidGhlbiIsInJhd0RhdGEiLCJkYXRhIiwiU0VBIiwiaW5kZXhPZiIsIndpdGhvdXQiLCJmb3JFYWNoIiwidmVyaWZ5Iiwib3B0IiwicGFjayIsInVucGFjayIsImJhdGNoZWRHZXQiLCJjYiIsImhrZXlzIiwibm9kZUtleXMiLCJzdGFjayIsImF0dHJLZXlzIiwiZmlsdGVyIiwibWF0Y2giLCJyZWFkQmF0Y2giLCJvayIsImZhaWwiLCJiYXRjaCIsInNwbGljZSIsImJhdGNoTWV0YSIsIm1hcCIsImNvbmNhdCIsInJlcGxhY2UiLCJobWdldCIsIm1ldGEiLCJvYmoiLCJfLiMiLCJ2YWwiLCJpZHgiLCJyZWFkS2V5QmF0Y2giLCJyZXN1bHQiLCJyZWFkTmV4dEJhdGNoIiwiZG9uZSIsImNhdGNoIiwid3JpdGUiLCJwdXQiLCJhbGwiLCJub2RlIiwicGF0aCIsIndyaXRlTmV4dEJhdGNoIiwidXBkYXRlZCIsIl8iLCIjIiwiPiIsInBpY2siLCJleGlzdGluZyIsIm1vZGlmaWVkS2V5cyIsInVwZGF0ZWRWYWwiLCJwcm9wIiwiZXhpc3RpbmdWYWwiLCJ1cGRhdGVkU291bCIsImV4aXN0aW5nU291bCIsInBhcnNlRmxvYXQiLCJhc3NvYyIsImhtc2V0IiwidG9SZWRpcyIsIm5vdGlmeUNoYW5nZVN1YnNjcmliZXJzIiwib2ZmQ2hhbmdlIiwicmVjZWl2ZXJGbnMiLCJfZ3VuIiwicmVjZWl2ZXIiLCJfY2xpZW50IiwiX3JlZiRza2lwVmFsaWRhdGlvbiIsInVuZGVmaW5lZCIsInNraXBWYWxpZGF0aW9uIiwiZGIiLCJvbkluIiwibXNnIiwiZnJvbSIsImpzb24iLCJmcm9tQ2x1c3RlciIsImRlZHVwSWQiLCJtc2dJZCIsIkAiLCJzZW5kIiwiaWdub3JlTGVlY2hpbmciLCJnZXREaWZmIiwic29ydGVkIiwiX3JhbWRhIiwidGVzdCIsIkZJRUxEX1NJWkVfTElNSVQiLCJzbGljZSIsImFycm93IiwiX3R5cGVvZiIsInZhbEtleXMiLCJyZW1haW5kZXIiLCJyZWFsS2V5Iiwiam9pbiIsInJlYWxWYWx1ZSIsInBvc3RVbmZsYXR0ZW4iLCJmbGF0dGVuIiwidW5mbGF0dGVuIiwic29ydCIsIm9uIiwidG8iLCJuZXh0IiwicmVxdWVzdCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsRUFBQUcsUUFBQSxTQUFBQSxRQUFBLFNBQUFBLFFBQUEsU0FDQSxtQkFBQUMsZUFBQUMsSUFDQUQsT0FBQSxxQ0FBQUosR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxhQUFBRCxFQUFBRyxRQUFBLFNBQUFBLFFBQUEsU0FBQUEsUUFBQSxTQUVBSixFQUFBLGFBQUFDLEVBQUFELEVBQUEsTUFBQUEsRUFBQSxNQUFBQSxFQUFBLE1BUkEsQ0FTQyxvQkFBQU8sVUFBQUMsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNELG1CQ1RBLElBQUFDLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQVosUUFHQSxJQUFBQyxFQUFBUyxFQUFBRSxHQUFBLENBQ0FDLEVBQUFELEVBQ0FFLEdBQUEsRUFDQWQsUUFBQSxJQVVBLE9BTkFlLEVBQUFILEdBQUFJLEtBQUFmLEVBQUFELFFBQUFDLElBQUFELFFBQUFXLEdB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LEVBQUc0QixHQUFHLEtBQU0sQ0FDVnBCLElBQUtGLEVBQ0x4RCxJQUFJLEVBQ0o3QixJQUFLQSIsImZpbGUiOiJndW4tcmVkaXMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicmFtZGFcIiksIHJlcXVpcmUoXCJyZWRpc1wiKSwgcmVxdWlyZShcImZsYXRcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJndW4tcmVkaXNcIiwgW1wicmFtZGFcIiwgXCJyZWRpc1wiLCBcImZsYXRcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZ3VuLXJlZGlzXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicmFtZGFcIiksIHJlcXVpcmUoXCJyZWRpc1wiKSwgcmVxdWlyZShcImZsYXRcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImd1bi1yZWRpc1wiXSA9IGZhY3Rvcnkocm9vdFtcInJhbWRhXCJdLCByb290W1wicmVkaXNcIl0sIHJvb3RbXCJmbGF0XCJdKTtcbn0pKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNF9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX182X18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IGFzIGNyZWF0ZVJlZGlzQ2xpZW50IH0gZnJvbSBcInJlZGlzXCI7XG5pbXBvcnQgeyB0b1JlZGlzLCBmcm9tUmVkaXMgfSBmcm9tIFwiLi9zZXJpYWxpemVcIjtcblxuY29uc3QgR0VUX0JBVENIX1NJWkUgPSAxMDAwMDtcbmNvbnN0IFBVVF9CQVRDSF9TSVpFID0gMTAwMDA7XG5cbmNvbnN0IG1ldGFSZSA9IC9eX1xcLi4qLztcbmNvbnN0IGVkZ2VSZSA9IC8oXFwuIyQpLztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNsaWVudCA9IChHdW4sIC4uLmNvbmZpZykgPT4ge1xuICBsZXQgY2hhbmdlU3Vic2NyaWJlcnMgPSBbXTtcbiAgY29uc3QgcmVkaXMgPSBjcmVhdGVSZWRpc0NsaWVudCguLi5jb25maWcpO1xuICBjb25zdCBub3RpZnlDaGFuZ2VTdWJzY3JpYmVycyA9IChzb3VsLCBrZXkpID0+XG4gICAgY2hhbmdlU3Vic2NyaWJlcnMubWFwKGZuID0+IGZuKHNvdWwsIGtleSkpO1xuICBjb25zdCBvbkNoYW5nZSA9IGZuID0+IGNoYW5nZVN1YnNjcmliZXJzLnB1c2goZm4pO1xuICBjb25zdCBvZmZDaGFuZ2UgPSBmbiA9PlxuICAgIChjaGFuZ2VTdWJzY3JpYmVycyA9IFIud2l0aG91dChbZm5dLCBjaGFuZ2VTdWJzY3JpYmVycykpO1xuXG4gIGNvbnN0IGdldCA9IHNvdWwgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoIXNvdWwpIHJldHVybiByZXNvbHZlKG51bGwpO1xuICAgICAgcmVkaXMuaGdldGFsbChzb3VsLCBmdW5jdGlvbihlcnIsIHJlcykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcImdldCBlcnJvclwiLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoZnJvbVJlZGlzKHJlcykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSk7XG5cbiAgY29uc3QgcmVhZCA9IHNvdWwgPT5cbiAgICBnZXQoc291bCkudGhlbihyYXdEYXRhID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSByYXdEYXRhID8geyAuLi5yYXdEYXRhIH0gOiByYXdEYXRhO1xuXG4gICAgICBpZiAoIUd1bi5TRUEgfHwgc291bC5pbmRleE9mKFwiflwiKSA9PT0gLTEpIHJldHVybiByYXdEYXRhO1xuICAgICAgUi53aXRob3V0KFtcIl9cIl0sIFIua2V5cyhkYXRhKSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBHdW4uU0VBLnZlcmlmeShcbiAgICAgICAgICBHdW4uU0VBLm9wdC5wYWNrKHJhd0RhdGFba2V5XSwga2V5LCByYXdEYXRhLCBzb3VsKSxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICByZXMgPT4gKGRhdGFba2V5XSA9IEd1bi5TRUEub3B0LnVucGFjayhyZXMsIGtleSwgcmF3RGF0YSkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pO1xuXG4gIGNvbnN0IHJlYWRLZXlCYXRjaCA9IChzb3VsLCBiYXRjaCkgPT5cbiAgICBuZXcgUHJvbWlzZSgob2ssIGZhaWwpID0+IHtcbiAgICAgIGNvbnN0IGJhdGNoTWV0YSA9IGJhdGNoLm1hcChrZXkgPT4gYF8uPi4ke2tleX1gLnJlcGxhY2UoZWRnZVJlLCBcIlwiKSk7XG5cbiAgICAgIHJldHVybiByZWRpcy5obWdldChzb3VsLCBiYXRjaE1ldGEsIChlcnIsIG1ldGEpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKFwiaG1nZXQgZXJyXCIsIGVyci5zdGFjayB8fCBlcnIpIHx8IGZhaWwoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYmogPSB7XG4gICAgICAgICAgXCJfLiNcIjogc291bFxuICAgICAgICB9O1xuXG4gICAgICAgIG1ldGEuZm9yRWFjaCgodmFsLCBpZHgpID0+IChvYmpbYmF0Y2hNZXRhW2lkeF1dID0gdmFsKSk7XG4gICAgICAgIHJldHVybiByZWRpcy5obWdldChzb3VsLCBiYXRjaCwgKGVyciwgcmVzKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJobWdldCBlcnJcIiwgZXJyLnN0YWNrIHx8IGVycikgfHwgZmFpbChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXMuZm9yRWFjaCgodmFsLCBpZHgpID0+IChvYmpbYmF0Y2hbaWR4XV0gPSB2YWwpKTtcbiAgICAgICAgICByZXR1cm4gb2soZnJvbVJlZGlzKG9iaikpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIGNvbnN0IGJhdGNoZWRHZXQgPSAoc291bCwgY2IpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVkaXMuaGtleXMoc291bCwgKGVyciwgbm9kZUtleXMpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvclwiLCBlcnIuc3RhY2sgfHwgZXJyKTtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVLZXlzLmxlbmd0aCA8PSBHRVRfQkFUQ0hfU0laRSkge1xuICAgICAgICAgIHJldHVybiBnZXQoc291bCkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgY2IocmVzKTtcbiAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhcImdldCBiaWcgc291bFwiLCBzb3VsLCBub2RlS2V5cy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBhdHRyS2V5cyA9IG5vZGVLZXlzLmZpbHRlcihrZXkgPT4gIWtleS5tYXRjaChtZXRhUmUpKTtcbiAgICAgICAgY29uc3QgcmVhZEJhdGNoID0gKCkgPT5cbiAgICAgICAgICBuZXcgUHJvbWlzZSgob2ssIGZhaWwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoID0gYXR0cktleXMuc3BsaWNlKDAsIEdFVF9CQVRDSF9TSVpFKTtcblxuICAgICAgICAgICAgaWYgKCFiYXRjaC5sZW5ndGgpIHJldHVybiBvayh0cnVlKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlYWRLZXlCYXRjaChzb3VsLCBiYXRjaCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICBjYihyZXN1bHQpO1xuICAgICAgICAgICAgICByZXR1cm4gb2soKTtcbiAgICAgICAgICAgIH0sIGZhaWwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZWFkTmV4dEJhdGNoID0gKCkgPT5cbiAgICAgICAgICByZWFkQmF0Y2goKS50aGVuKGRvbmUgPT4gIWRvbmUgJiYgcmVhZE5leHRCYXRjaCk7XG5cbiAgICAgICAgcmV0dXJuIHJlYWROZXh0QmF0Y2goKVxuICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIGNvbnN0IHdyaXRlID0gcHV0ID0+XG4gICAgUHJvbWlzZS5hbGwoXG4gICAgICBSLmtleXMocHV0KS5tYXAoXG4gICAgICAgIHNvdWwgPT5cbiAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gcHV0W3NvdWxdO1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IFIucGF0aChbXCJfXCIsIFwiPlwiXSwgbm9kZSkgfHwge307XG4gICAgICAgICAgICBjb25zdCBub2RlS2V5cyA9IFIua2V5cyhtZXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHdyaXRlTmV4dEJhdGNoID0gKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBiYXRjaCA9IG5vZGVLZXlzLnNwbGljZSgwLCBQVVRfQkFUQ0hfU0laRSk7XG5cbiAgICAgICAgICAgICAgaWYgKCFiYXRjaC5sZW5ndGgpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWQgPSB7XG4gICAgICAgICAgICAgICAgXzoge1xuICAgICAgICAgICAgICAgICAgXCIjXCI6IHNvdWwsXG4gICAgICAgICAgICAgICAgICBcIj5cIjogUi5waWNrKGJhdGNoLCBtZXRhKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLi4uUi5waWNrKGJhdGNoLCBub2RlKVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIC8vIHJldHVybiByZWFkS2V5QmF0Y2goc291bCwgYmF0Y2gpLnRoZW4oZXhpc3RpbmcgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gZ2V0KHNvdWwpLnRoZW4oZXhpc3RpbmcgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkS2V5cyA9IGJhdGNoLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFZhbCA9IFIucHJvcChrZXksIHVwZGF0ZWQpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdWYWwgPSBSLnByb3Aoa2V5LCBleGlzdGluZyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkVmFsID09PSBleGlzdGluZ1ZhbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFNvdWwgPSBSLnBhdGgoW2tleSwgXCIjXCJdLCB1cGRhdGVkKTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nU291bCA9IFIucGF0aChba2V5LCBcIiNcIl0sIGV4aXN0aW5nKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAodXBkYXRlZFNvdWwgfHwgZXhpc3RpbmdTb3VsKSAmJlxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU291bCA9PT0gZXhpc3RpbmdTb3VsXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdXBkYXRlZFZhbCA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGV4aXN0aW5nVmFsKSA9PT0gdXBkYXRlZFZhbFxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW1vZGlmaWVkS2V5cy5sZW5ndGgpIHJldHVybiB3cml0ZU5leHRCYXRjaCgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZiA9IHtcbiAgICAgICAgICAgICAgICAgIF86IFIuYXNzb2MoXCI+XCIsIFIucGljayhtb2RpZmllZEtleXMsIG1ldGEpLCB1cGRhdGVkLl8pLFxuICAgICAgICAgICAgICAgICAgLi4uUi5waWNrKG1vZGlmaWVkS2V5cywgdXBkYXRlZClcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZGlzLmhtc2V0KHNvdWwsIHRvUmVkaXMoZGlmZiksIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHdyaXRlTmV4dEJhdGNoKCk7XG4gICAgICAgICAgICAgICAgICBub3RpZnlDaGFuZ2VTdWJzY3JpYmVycyhzb3VsLCBkaWZmKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVOZXh0QmF0Y2goKTtcbiAgICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG5cbiAgb25DaGFuZ2UoKHNvdWwsIGRpZmYpID0+IGNvbnNvbGUubG9nKFwibW9kaWZ5XCIsIHNvdWwsIFIua2V5cyhkaWZmKSkpO1xuXG4gIHJldHVybiB7IGdldCwgcmVhZCwgYmF0Y2hlZEdldCwgd3JpdGUsIG9uQ2hhbmdlLCBvZmZDaGFuZ2UgfTtcbn07XG4iLCJpbXBvcnQgKiBhcyByZWNlaXZlckZucyBmcm9tIFwiLi9yZWNlaXZlclwiO1xuZXhwb3J0IHsgYXR0YWNoVG9HdW4gfSBmcm9tIFwiLi9ndW5cIjtcblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVyID0gcmVjZWl2ZXJGbnM7XG4iLCJpbXBvcnQgKiBhcyBSIGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSBcIi4vY2xpZW50XCI7XG5cbmV4cG9ydCBjb25zdCByZXNwb25kVG9HZXRzID0gKEd1biwgeyBza2lwVmFsaWRhdGlvbiA9IHRydWUgfSA9IHt9KSA9PiBkYiA9PiB7XG4gIGNvbnN0IHJlZGlzID0gKEd1bi5yZWRpcyA9IEd1bi5yZWRpcyB8fCBjcmVhdGVDbGllbnQoR3VuKSk7XG5cbiAgZGIub25Jbihtc2cgPT4ge1xuICAgIGNvbnN0IHsgZnJvbSwganNvbiwgZnJvbUNsdXN0ZXIgfSA9IG1zZztcbiAgICBjb25zdCBzb3VsID0gUi5wYXRoKFtcImdldFwiLCBcIiNcIl0sIGpzb24pO1xuICAgIGNvbnN0IGRlZHVwSWQgPSBSLnByb3AoXCIjXCIsIGpzb24pO1xuXG4gICAgaWYgKCFzb3VsIHx8IGZyb21DbHVzdGVyKSByZXR1cm4gbXNnO1xuICAgIHJldHVybiByZWRpc1xuICAgICAgLmJhdGNoZWRHZXQoc291bCwgcmVzdWx0ID0+IHtcbiAgICAgICAgY29uc3QganNvbiA9IHtcbiAgICAgICAgICBcIiNcIjogZnJvbS5tc2dJZCgpLFxuICAgICAgICAgIFwiQFwiOiBkZWR1cElkLFxuICAgICAgICAgIHB1dDogcmVzdWx0ID8geyBbc291bF06IHJlc3VsdCB9IDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGZyb20uc2VuZCh7XG4gICAgICAgICAganNvbixcbiAgICAgICAgICBpZ25vcmVMZWVjaGluZzogdHJ1ZSxcbiAgICAgICAgICBza2lwVmFsaWRhdGlvbjogIXJlc3VsdCB8fCBza2lwVmFsaWRhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgY29uc3QganNvbiA9IHtcbiAgICAgICAgICBcIiNcIjogZnJvbS5tc2dJZCgpLFxuICAgICAgICAgIFwiQFwiOiBkZWR1cElkLFxuICAgICAgICAgIGVycjogYCR7ZXJyfWBcbiAgICAgICAgfTtcblxuICAgICAgICBmcm9tLnNlbmQoeyBqc29uLCBpZ25vcmVMZWVjaGluZzogdHJ1ZSwgc2tpcFZhbGlkYXRpb24gfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4gbXNnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRiO1xufTtcblxuZXhwb3J0IGNvbnN0IGFjY2VwdFdyaXRlcyA9IEd1biA9PiBkYiA9PiB7XG4gIGNvbnN0IHJlZGlzID0gKEd1bi5yZWRpcyA9IEd1bi5yZWRpcyB8fCBjcmVhdGVDbGllbnQoR3VuKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBkYi5vbkluKG1zZyA9PiB7XG4gICAgaWYgKG1zZy5mcm9tQ2x1c3RlcikgcmV0dXJuIG1zZztcbiAgICBpZiAobXNnLmpzb24ucHV0KSB7XG4gICAgICByZXR1cm4gZGJcbiAgICAgICAgLmdldERpZmYobXNnLmpzb24ucHV0KVxuICAgICAgICAudGhlbihkaWZmID0+IHtcbiAgICAgICAgICBjb25zdCBzb3VscyA9IFIua2V5cyhkaWZmKTtcblxuICAgICAgICAgIGlmICghc291bHMubGVuZ3RoKSByZXR1cm4gbXNnO1xuICAgICAgICAgIC8vIHJldHVybiBjb25zb2xlLmxvZyhcIndvdWxkIHdyaXRlXCIsIGRpZmYpIHx8IG1zZztcbiAgICAgICAgICByZXR1cm4gcmVkaXNcbiAgICAgICAgICAgIC53cml0ZShkaWZmKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBqc29uID0geyBcIkBcIjogbXNnLmpzb25bXCIjXCJdLCBvazogdHJ1ZSwgZXJyOiBudWxsIH07XG5cbiAgICAgICAgICAgICAgbXNnLmZyb20gJiZcbiAgICAgICAgICAgICAgICBtc2cuZnJvbS5zZW5kICYmXG4gICAgICAgICAgICAgICAgbXNnLmZyb20uc2VuZCh7XG4gICAgICAgICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgICAgICAgaWdub3JlTGVlY2hpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICBza2lwVmFsaWRhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gbXNnO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBqc29uID0geyBcIkBcIjogbXNnLmpzb25bXCIjXCJdLCBvazogZmFsc2UsIGVycjogYCR7ZXJyfWAgfTtcblxuICAgICAgICAgICAgICBtc2cuZnJvbSAmJlxuICAgICAgICAgICAgICAgIG1zZy5mcm9tLnNlbmQgJiZcbiAgICAgICAgICAgICAgICBtc2cuZnJvbS5zZW5kKHtcbiAgICAgICAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICAgICAgICBpZ25vcmVMZWVjaGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIHNraXBWYWxpZGF0aW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiBtc2c7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJlcnJvciBhY2NlcHRpbmcgd3JpdGVzXCIsIGVyci5zdGFjayB8fCBlcnIpXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBtc2c7XG4gIH0pO1xuXG4gIHJldHVybiBkYjtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzRfXzsiLCJpbXBvcnQgeyBrZXlzIH0gZnJvbSBcInJhbWRhXCI7XG5jb25zdCBmbGF0dGVuID0gcmVxdWlyZShcImZsYXRcIik7XG5cbmNvbnN0IEZJRUxEX1NJWkVfTElNSVQgPSAxMDAwMDA7XG5cbmZ1bmN0aW9uIHBvc3RVbmZsYXR0ZW4ob2JqKSB7XG4gIC8vIFRoaXMgaXMgcHJvYmFibHkgb25seSBuZWNlc3NhcnkgaWYgeW91IGFyZSBzdHVwaWQgbGlrZSBtZSBhbmQgdXNlIHRoZSBkZWZhdWx0IC4gZGVsaW1pdGVyIGZvciBmbGF0dGVuXG4gIGlmICghb2JqKSByZXR1cm4gb2JqO1xuICBsZXQgYXJyb3cgPSAob2JqLl8gJiYgb2JqLl9bXCI+XCJdKSB8fCB7fTtcblxuICBrZXlzKGFycm93KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGxldCB2YWx1ZSA9IGFycm93W2tleV07XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBsZXQgdmFsS2V5cyA9IGtleXModmFsdWUpO1xuICAgICAgbGV0IHJlbWFpbmRlciA9IHZhbEtleXNbMF07XG5cbiAgICAgIGlmIChyZW1haW5kZXIpIHtcbiAgICAgICAgbGV0IHJlYWxLZXkgPSBba2V5LCB2YWxLZXlzXS5qb2luKFwiLlwiKTtcbiAgICAgICAgbGV0IHJlYWxWYWx1ZSA9IHZhbHVlW3JlbWFpbmRlcl07XG5cbiAgICAgICAgZGVsZXRlIGFycm93W2tleV07XG4gICAgICAgIGFycm93W3JlYWxLZXldID0gcmVhbFZhbHVlO1xuICAgICAgICByZWFsVmFsdWUgPSAob2JqW2tleV0gJiYgb2JqW2tleV1bcmVtYWluZGVyXSkgfHwgbnVsbDtcbiAgICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICBvYmpbcmVhbEtleV0gPSByZWFsVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAga2V5cyhvYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5WzBdID09PSBcIi5cIikgZGVsZXRlIFtrZXldO1xuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21SZWRpcyhvYmopIHtcbiAgaWYgKCFvYmopIHJldHVybiBvYmo7XG4gIGNvbnN0IHNvcnRlZCA9IHt9O1xuXG4gIGtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXlbMF0gPT09IFwiLlwiKSBkZWxldGUgb2JqW2tleV07XG5cbiAgICBpZiAob2JqW2tleV0gPT09IFwifE5VTEx8XCIpIHtcbiAgICAgIG9ialtrZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKG9ialtrZXldID09PSBcInxVTkRFRklORUR8XCIpIHtcbiAgICAgIG9ialtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgvPlxcLi8udGVzdChrZXkpKSB7XG4gICAgICBvYmpba2V5XSA9IHBhcnNlRmxvYXQob2JqW2tleV0sIDEwKSB8fCBvYmpba2V5XTtcbiAgICB9XG4gICAgaWYgKG9ialtrZXldICYmIG9ialtrZXldLmxlbmd0aCA+IEZJRUxEX1NJWkVfTElNSVQpIHtcbiAgICAgIG9ialtrZXldID0gb2JqW2tleV0uc2xpY2UoMCwgRklFTERfU0laRV9MSU1JVCk7XG4gICAgICBjb25zb2xlLmxvZyhcInRydW5jYXRlZFwiLCBrZXkpO1xuICAgIH1cbiAgfSk7XG5cbiAgb2JqID0gcG9zdFVuZmxhdHRlbihmbGF0dGVuLnVuZmxhdHRlbihvYmopKTtcblxuICBPYmplY3Qua2V5cyhvYmopXG4gICAgLnNvcnQoKVxuICAgIC5mb3JFYWNoKGtleSA9PiAoc29ydGVkW2tleV0gPSBvYmpba2V5XSkpO1xuXG4gIHJldHVybiBzb3J0ZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1JlZGlzKG9iaikge1xuICBpZiAoIW9iaikgcmV0dXJuIG9iajtcbiAgb2JqID0gZmxhdHRlbihvYmopO1xuICBrZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAob2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgIG9ialtrZXldID0gXCJ8TlVMTHxcIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvYmpba2V5XSA9IFwifFVOREVGSU5FRHxcIjtcbiAgICB9XG4gICAgaWYgKG9ialtrZXldICYmIG9ialtrZXldLmxlbmd0aCA+IEZJRUxEX1NJWkVfTElNSVQpIHtcbiAgICAgIG9ialtrZXldID0gb2JqW2tleV0uc2xpY2UoMCwgRklFTERfU0laRV9MSU1JVCk7XG4gICAgICBjb25zb2xlLmxvZyhcInRydW5jYXRlZCBpbnB1dFwiLCBrZXkpO1xuICAgIH1cbiAgICBpZiAoa2V5WzBdID09PSBcIi5cIikgZGVsZXRlIG9ialtrZXldO1xuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNl9fOyIsImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gXCIuL2NsaWVudFwiO1xuXG5leHBvcnQgY29uc3QgYXR0YWNoVG9HdW4gPSBHdW4gPT4gR3VuLm9uKFwiY3JlYXRlXCIsIGZ1bmN0aW9uKGRiKSB7XG4gIHRoaXMudG8ubmV4dChkYik7XG4gIGNvbnN0IHJlZGlzID0gR3VuLnJlZGlzID0gZGIucmVkaXMgPSBjcmVhdGVDbGllbnQoR3VuKTtcblxuICBkYi5vbihcImdldFwiLCBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gICAgdGhpcy50by5uZXh0KHJlcXVlc3QpO1xuICAgIGNvbnN0IGRlZHVwSWQgPSByZXF1ZXN0W1wiI1wiXTtcbiAgICBjb25zdCBnZXQgPSByZXF1ZXN0LmdldDtcbiAgICBjb25zdCBzb3VsID0gZ2V0W1wiI1wiXTtcblxuICAgIHJlZGlzLmJhdGNoZWRHZXQoc291bCwgcmVzdWx0ID0+IGRiLm9uKFwiaW5cIiwge1xuICAgICAgXCJAXCI6IGRlZHVwSWQsXG4gICAgICBwdXQ6IHJlc3VsdCA/IHsgW3NvdWxdOiByZXN1bHQgfSA6IG51bGwsXG4gICAgICBlcnI6IG51bGxcbiAgICB9KSkuY2F0Y2goZXJyID0+XG4gICAgICBjb25zb2xlLmVycm9yKFwiZXJyb3JcIiwgZXJyLnN0YWNrIHx8IGVycikgfHxcbiAgICAgIGRiLm9uKFwiaW5cIiwge1xuICAgICAgICBcIkBcIjogZGVkdXBJZCxcbiAgICAgICAgcHV0OiBudWxsLFxuICAgICAgICBlcnJcbiAgICAgIH0pXG4gICAgKTtcbiAgfSk7XG5cbiAgZGIub24oXCJwdXRcIiwgZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHRoaXMudG8ubmV4dChyZXF1ZXN0KTtcbiAgICBjb25zdCBkZWR1cElkID0gcmVxdWVzdFtcIiNcIl07XG5cbiAgICByZWRpcy53cml0ZShyZXF1ZXN0LnB1dClcbiAgICAgIC50aGVuKCgpID0+XG4gICAgICAgIGRiLm9uKFwiaW5cIiwge1xuICAgICAgICAgIFwiQFwiOiBkZWR1cElkLFxuICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIGVycjogbnVsbFxuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgLmNhdGNoKGVyciA9PlxuICAgICAgICBkYi5vbihcImluXCIsIHtcbiAgICAgICAgICBcIkBcIjogZGVkdXBJZCxcbiAgICAgICAgICBvazogZmFsc2UsXG4gICAgICAgICAgZXJyOiBlcnJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9