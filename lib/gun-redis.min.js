!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("ramda"),require("redis"),require("flat")):"function"==typeof define&&define.amd?define("gun-redis",["ramda","redis","flat"],r):"object"==typeof exports?exports["gun-redis"]=r(require("ramda"),require("redis"),require("flat")):e["gun-redis"]=r(e.ramda,e.redis,e.flat)}("undefined"!=typeof self?self:this,function(e,r,t){return function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=2)}([function(r,t){r.exports=e},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.createClient=void 0;var n=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(0)),o=t(4),i=t(5);var u=/^_\..*/,c=/(\.#$)/;r.createClient=function(e){for(var r=[],t=arguments.length,f=new Array(t>1?t-1:0),a=1;a<t;a++)f[a-1]=arguments[a];var l=o.createClient.apply(void 0,f),s=function(e){return r.push(e)},p=function(e){return new Promise(function(r,t){if(!e)return r(null);l.hgetall(e,function(e,n){e?(console.error("get error",e),t(e)):r((0,i.fromRedis)(n))})})};return s(function(e,r){return console.log("modify",e,n.keys(r))}),{get:p,read:function(r){return p(r).then(function(t){var o=t?{...t}:t;return e.SEA&&-1!==r.indexOf("~")?(n.without(["_"],n.keys(o)).forEach(function(n){e.SEA.verify(e.SEA.opt.pack(t[n],n,t,r),!1,function(r){return o[n]=e.SEA.opt.unpack(r,n,t)})}),o):t})},batchedGet:function(e,r){return new Promise(function(t,n){l.hkeys(e,function(o,f){if(o)return console.error("error",o.stack||o),n(o);if(f.length<=1e4)return p(e).then(function(e){r(e),t(e)});console.log("get big soul",e,f.length);var a=f.filter(function(e){return!e.match(u)}),s=function(){return new Promise(function(t,n){var o=a.splice(0,1e4);return o.length?function(e,r){return new Promise(function(t,n){var o=r.map(function(e){return"_.>.".concat(e).replace(c,"")});return l.hmget(e,o,function(u,c){if(u)return console.error("hmget err",u.stack||u)||n(u);var f={"_.#":e};return c.forEach(function(e,r){return f[o[r]]=e}),l.hmget(e,r,function(e,o){return e?console.error("hmget err",e.stack||e)||n(e):(o.forEach(function(e,t){return f[r[t]]=e}),t((0,i.fromRedis)(f)))})})})}(e,o).then(function(e){return r(e),t()},n):t(!0)})};return function e(){return s().then(function(r){return!r&&e})}().then(function(e){t(e)}).catch(n)})})},write:function(e){return Promise.all(n.keys(e).map(function(t){return new Promise(function(o,u){var c=e[t],f=n.path(["_",">"],c)||{},a=n.keys(f);return function e(){var s=a.splice(0,1e4);if(!s.length)return o();var d={_:{"#":t,">":n.pick(s,f)},...n.pick(s,c)};return p(t).then(function(o){var c=s.filter(function(e){var r=n.prop(e,d),t=n.prop(e,o);if(r===t)return!1;var i=n.path([e,"#"],d),u=n.path([e,"#"],o);return!((i||u)&&i===u||"number"==typeof r&&parseFloat(t)===r)});if(!c.length)return e();var a={_:n.assoc(">",n.pick(c,f),d._),...n.pick(c,d)};return l.hmset(t,(0,i.toRedis)(a),function(n){n?u(n):e(),function(e,t,n){r.map(function(r){return r(e,t,n)})}(t,a,o)})})}()})}))},onChange:s,offChange:function(e){return r=n.without([e],r)}}}},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),Object.defineProperty(r,"attachToGun",{enumerable:!0,get:function(){return o.attachToGun}}),r.receiver=void 0;var n=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(3)),o=t(7);var i=n;r.receiver=i},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.acceptWrites=r.respondToGets=void 0;var n=function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,t):{};n.get||n.set?Object.defineProperty(r,t,n):r[t]=e[t]}return r.default=e,r}(t(0)),o=t(1);r.respondToGets=function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=r.disableRelay,i=void 0===t||t,u=r.skipValidation,c=void 0===u||u;return function(r){var t=e.redis=e.redis||(0,o.createClient)(e);return r.onIn(function(e){var r=e.from,o=e.json,u=e.fromCluster,f=n.path(["get","#"],o),a=n.prop("#",o);return!f||u?e:t.batchedGet(f,function(e){var t,n,o,i={"#":r.msgId(),"@":a,put:e?(t={},n=f,o=e,n in t?Object.defineProperty(t,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[n]=o,t):null};r.send({json:i,ignoreLeeching:!0,skipValidation:!e||c})}).then(function(){return i?n.assoc("noRelay",!0,e):e}).catch(function(t){var n={"#":r.msgId(),"@":a,err:"".concat(t)};return r.send({json:n,ignoreLeeching:!0,skipValidation:c}),e})}),r}};r.acceptWrites=function(e){var r=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).disableRelay,t=void 0!==r&&r;return function(r){var i=e.redis=e.redis||(0,o.createClient)(e);return r.onIn(function(e){return e.fromCluster?e:e.json.put?r.getDiff(e.json.put).then(function(r){return n.keys(r).length?i.write(r).then(function(){var r={"@":e.json["#"],ok:!0,err:null};return e.from&&e.from.send&&e.from.send({json:r,noRelay:!0,ignoreLeeching:!0,skipValidation:!0}),t?n.assoc("noRelay",!0,e):e}).catch(function(r){var n={"@":e.json["#"],ok:!1,err:"".concat(r)};return e.from&&e.from.send&&e.from.send({json:n,noRelay:t,ignoreLeeching:!0,skipValidation:!0}),e}):e}).catch(function(e){return console.error("error accepting writes",e.stack||e)}):e}),r}}},function(e,t){e.exports=r},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.fromRedis=function(e){if(!e)return e;var r={};return(0,n.keys)(e).forEach(function(r){"."===r[0]&&delete e[r],"|NULL|"===e[r]&&(e[r]=null),"|UNDEFINED|"===e[r]&&(e[r]=void 0),/>\./.test(r)&&(e[r]=parseFloat(e[r],10)||e[r]),e[r]&&e[r].length>u&&(e[r]=e[r].slice(0,u),console.log("truncated",r))}),e=function(e){if(!e)return e;var r=e._&&e._[">"]||{};return(0,n.keys)(r).forEach(function(t){var i=r[t];if("object"===o(i)){var u=(0,n.keys)(i),c=u[0];if(c){var f=[t,u].join("."),a=i[c];delete r[t],r[f]=a,a=e[t]&&e[t][c]||null,delete e[t],e[f]=a}}}),(0,n.keys)(e).forEach(function(e){e[0]}),e}(i.unflatten(e)),Object.keys(e).sort().forEach(function(t){return r[t]=e[t]}),r},r.toRedis=function(e){return e?(e=i(e),(0,n.keys)(e).forEach(function(r){null===e[r]&&(e[r]="|NULL|"),void 0===o(e[r])&&(e[r]="|UNDEFINED|"),e[r]&&e[r].length>u&&(e[r]=e[r].slice(0,u),console.log("truncated input",r)),"."===r[0]&&delete e[r]}),e):e};var n=t(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=t(6),u=1e5},function(e,r){e.exports=t},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.attachToGun=void 0;var n=t(1);r.attachToGun=function(e){return e.on("create",function(r){this.to.next(r);var t=e.redis=r.redis=(0,n.createClient)(e);r.on("get",function(e){this.to.next(e);var n=e["#"],o=e.get["#"];t.batchedGet(o,function(e){return r.on("in",{"@":n,put:e?(t={},i=o,u=e,i in t?Object.defineProperty(t,i,{value:u,enumerable:!0,configurable:!0,writable:!0}):t[i]=u,t):null,err:null});var t,i,u}).catch(function(e){return console.error("error",e.stack||e)||r.on("in",{"@":n,put:null,err:e})})}),r.on("put",function(e){this.to.next(e);var n=e["#"];t.write(e.put).then(function(){return r.on("in",{"@":n,ok:!0,err:null})}).catch(function(e){return r.on("in",{"@":n,ok:!1,err:e})})})})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,