!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("redis"),require("flat")):"function"==typeof define&&define.amd?define("gun-redis",["ramda","redis","flat"],t):"object"==typeof exports?exports["gun-redis"]=t(require("ramda"),require("redis"),require("flat")):e["gun-redis"]=t(e.ramda,e.redis,e.flat)}("undefined"!=typeof self?self:this,function(e,t,r){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(t,r){t.exports=e},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createClient=void 0;var n=r(0),o=r(4),i=r(5),u=/^_\..*/,c=/(\.#$)/;t.createClient=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),f=1;f<t;f++)r[f-1]=arguments[f];var a=o.createClient.apply(void 0,r),l=function(e){return new Promise(function(t,r){if(!e)return t(null);a.hgetall(e,function(e,n){e?(console.error("get error",e),r(e)):t((0,i.fromRedis)(n))})})};return{get:l,read:function(t){return l(t).then(function(r){var o=r?{...r}:r;return e.SEA&&-1!==t.indexOf("~")?((0,n.keys)(o).forEach(function(n){e.SEA.verify(e.SEA.opt.pack(r[n],n,r,t),!1,function(t){return o[n]=e.SEA.opt.unpack(t,n,r)})}),o):r})},batchedGet:function(e,t){return new Promise(function(r,n){a.hkeys(e,function(o,f){if(o)return console.error("error",o.stack||o),n(o);if(f.length<=1e4)return l(e).then(function(e){t(e),r(e)});console.log("get big soul",e,f.length);var s=f.filter(function(e){return!e.match(u)});return function r(){return new Promise(function(r,n){var o=s.splice(0,1e4);if(!o.length)return r(!0);var u=o.map(function(e){return"_.>.".concat(e).replace(c,"")});return a.hmget(e,u,function(c,f){if(c)return console.error("hmget err",c.stack||c)||n(c);var l={"_.#":e};return f.forEach(function(e,t){return l[u[t]]=e}),a.hmget(e,o,function(e,u){if(e)return console.error("hmget err",e.stack||e)||n(e);u.forEach(function(e,t){return l[o[t]]=e});var c=(0,i.fromRedis)(l);return t(c),r()})})}).then(function(e){return!e&&r})}().then(function(e){r(e)}).catch(n)})})},write:function(e){return Promise.all((0,n.keys)(e).map(function(t){return new Promise(function(r,o){var u=e[t],c=(0,n.path)(["_",">"],u)||{},f=(0,n.keys)(c);return function e(){var l=f.splice(0,1e4);if(!l.length)return r();var s=(0,i.toRedis)({_:{"#":t,">":(0,n.pick)(l,c)},...(0,n.pick)(l,u)});return a.hmset(t,(0,i.toRedis)(s),function(t){return t?o(t):e()})}()})}))}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"attachToGun",{enumerable:!0,get:function(){return o.attachToGun}}),t.receiver=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(3)),o=r(7);var i=n;t.receiver=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.respondToGets=void 0;var n=r(0),o=r(1);t.respondToGets=function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).skipValidation,r=void 0===t||t;return function(t){var i=(0,o.createClient)(e);return t.onIn(function(e){var t=e.from,o=e.json,u=(0,n.path)(["get","#"],o),c=(0,n.prop)("#",o);return u?i.batchedGet(u,function(e){var n,o,i,f={"#":t.msgId(),"@":c,put:(n={},o=u,i=e||void 0,o in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i,n)};t.send({json:f,ignoreLeeching:!0,skipValidation:!e||r})}).catch(function(e){var n={"#":t.msgId(),"@":c,err:"".concat(e)};t.send({json:n,ignoreLeeching:!0,skipValidation:r})}).then(function(){return e}):e}),t}}},function(e,r){e.exports=t},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromRedis=function(e){if(!e)return e;var t={};return(0,n.keys)(e).forEach(function(t){"."===t[0]&&delete e[t],"|NULL|"===e[t]&&(e[t]=null),"|UNDEFINED|"===e[t]&&(e[t]=void 0),/>\./.test(t)&&(e[t]=parseFloat(e[t],10)||e[t]),e[t]&&e[t].length>u&&(e[t]=e[t].slice(0,u),console.log("truncated",t))}),e=function(e){if(!e)return e;var t=e._&&e._[">"]||{};return(0,n.keys)(t).forEach(function(r){var i=t[r];if("object"===o(i)){var u=(0,n.keys)(i),c=u[0];if(c){var f=[r,u].join("."),a=i[c];delete t[r],t[f]=a,a=e[r]&&e[r][c]||null,delete e[r],e[f]=a}}}),(0,n.keys)(e).forEach(function(e){e[0]}),e}(i.unflatten(e)),Object.keys(e).sort().forEach(function(r){return t[r]=e[r]}),t},t.toRedis=function(e){return e?(e=i(e),(0,n.keys)(e).forEach(function(t){null===e[t]&&(e[t]="|NULL|"),void 0===e[t]&&(e[t]="|UNDEFINED|"),e[t]&&e[t].length>u&&(e[t]=e[t].slice(0,u),console.log("truncated input",t)),"."===t[0]&&delete e[t]}),e):e};var n=r(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(6),u=1e5},function(e,t){e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.attachToGun=void 0;var n=r(1);t.attachToGun=function(e){return e.on("create",function(t){this.to.next(t);var r=e.redis=t.redis=(0,n.createClient)(e);t.on("get",function(e){this.to.next(e);var n=e["#"],o=e.get["#"];r.batchedGet(o,function(e){return t.on("in",{"@":n,put:e?(r={},i=o,u=e,i in r?Object.defineProperty(r,i,{value:u,enumerable:!0,configurable:!0,writable:!0}):r[i]=u,r):null,err:null});var r,i,u}).catch(function(e){return console.error("error",e.stack||e)||t.on("in",{"@":n,put:null,err:e})})}),t.on("put",function(e){this.to.next(e);var n=e["#"];r.write(e.put).then(function(){return t.on("in",{"@":n,ok:!0,err:null})}).catch(function(e){return t.on("in",{"@":n,ok:!1,err:e})})})})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,