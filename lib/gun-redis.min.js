!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("ramda"),require("redis"),require("flat")):"function"==typeof define&&define.amd?define("gun-redis",["ramda","redis","flat"],t):"object"==typeof exports?exports["gun-redis"]=t(require("ramda"),require("redis"),require("flat")):e["gun-redis"]=t(e.ramda,e.redis,e.flat)}("undefined"!=typeof self?self:this,function(e,t,r){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=2)}([function(t,r){t.exports=e},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createClient=void 0;var n=r(0),o=r(4),u=r(5),i=/^_\..*/,c=/(\.#$)/;t.createClient=function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),f=1;f<t;f++)r[f-1]=arguments[f];var a=o.createClient.apply(void 0,r),l=function(e){return new Promise(function(t,r){if(!e)return t(null);a.hgetall(e,function(e,n){e?(console.error("get error",e),r(e)):t((0,u.fromRedis)(n))})})};return{get:l,read:function(t){return l(t).then(function(r){var o=r?{...r}:r;return e.SEA&&-1!==t.indexOf("~")?((0,n.keys)(o).forEach(function(n){e.SEA.verify(e.SEA.opt.pack(r[n],n,r,t),!1,function(t){return o[n]=e.SEA.opt.unpack(t,n,r)})}),o):r})},batchedGet:function(e,t){return new Promise(function(r,n){a.hkeys(e,function(o,f){if(o)return console.error("error",o.stack||o),n(o);if(f.length<=1e4)return l(e).then(function(e){t(e),r(e)});console.log("get big soul",e,f.length);var s=f.filter(function(e){return!e.match(i)});return function r(){return new Promise(function(r,n){var o=s.splice(0,1e4);if(!o.length)return r(!0);var i=o.map(function(e){return"_.>.".concat(e).replace(c,"")});return a.hmget(e,i,function(c,f){if(c)return console.error("hmget err",c.stack||c)||n(c);var l={"_.#":e};return f.forEach(function(e,t){return l[i[t]]=e}),a.hmget(e,o,function(e,i){if(e)return console.error("hmget err",e.stack||e)||n(e);i.forEach(function(e,t){return l[o[t]]=e});var c=(0,u.fromRedis)(l);return t(c),r()})})}).then(function(e){return!e&&r})}().then(function(e){r(e)}).catch(n)})})},write:function(e){return Promise.all((0,n.keys)(e).map(function(t){return new Promise(function(r,o){var i=e[t],c=(0,n.path)(["_",">"],i)||{},f=(0,n.keys)(c);return function e(){var r=f.splice(0,1e4);if(r.length){var l=(0,u.toRedis)({_:{"#":t,">":(0,n.pick)(r,c)},...(0,n.pick)(r,i)});a.hmset(t,(0,u.toRedis)(l),function(t){return t?o(t):e()})}}()})}))}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"attachToGun",{enumerable:!0,get:function(){return o.attachToGun}}),t.receiver=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,r):{};n.get||n.set?Object.defineProperty(t,r,n):t[r]=e[r]}return t.default=e,t}(r(3)),o=r(7);var u=n;t.receiver=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.respondToGets=void 0;var n=r(0),o=r(1);t.respondToGets=function(e){return function(t){var r=(0,o.createClient)(e);return t.onIn(function(e){var t=e.from,o=e.json,u=(0,n.path)(["get","#"],o),i=(0,n.prop)("#",o);return u?r.batchedGet(u,function(e){var r,n,o,c={"#":t.msgId(),"@":i,put:(r={},n=u,o=e||void 0,n in r?Object.defineProperty(r,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[n]=o,r)};t.send({json:c,ignoreLeeching:!0,skipValidation:!e})}).catch(function(e){var r={"#":t.msgId(),"@":i,err:"".concat(e)};t.send({json:r,ignoreLeeching:!0,skipValidation:!0})}).then(function(){return e}):e}),t}}},function(e,r){e.exports=t},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromRedis=function(e){if(!e)return e;var t={};return(0,n.keys)(e).forEach(function(t){"."===t[0]&&delete e[t],"|NULL|"===e[t]&&(e[t]=null),"|UNDEFINED|"===e[t]&&(e[t]=void 0),/>\./.test(t)&&(e[t]=parseFloat(e[t],10)||e[t]),e[t]&&e[t].length>i&&(e[t]=e[t].slice(0,i),console.log("truncated",t))}),e=function(e){if(!e)return e;var t=e._&&e._[">"]||{};return(0,n.keys)(t).forEach(function(r){var u=t[r];if("object"===o(u)){var i=(0,n.keys)(u),c=i[0];if(c){var f=[r,i].join("."),a=u[c];delete t[r],t[f]=a,a=e[r]&&e[r][c]||null,delete e[r],e[f]=a}}}),(0,n.keys)(e).forEach(function(e){e[0]}),e}(u.unflatten(e)),Object.keys(e).sort().forEach(function(r){return t[r]=e[r]}),t},t.toRedis=function(e){return e?(e=u(e),(0,n.keys)(e).forEach(function(t){null===e[t]&&(e[t]="|NULL|"),void 0===e[t]&&(e[t]="|UNDEFINED|"),e[t]&&e[t].length>i&&(e[t]=e[t].slice(0,i),console.log("truncated input",t)),"."===t[0]&&delete e[t]}),e):e};var n=r(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var u=r(6),i=1e5},function(e,t){e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.attachToGun=void 0;var n=r(1);t.attachToGun=function(e){return e.on("create",function(t){this.to.next(t);var r=e.redis=t.redis=(0,n.createClient)(e);t.on("get",function(e){this.to.next(e);var n=e["#"],o=e.get["#"];r.batchedGet(o,function(e){return t.on("in",{"@":n,put:e?(r={},u=o,i=e,u in r?Object.defineProperty(r,u,{value:i,enumerable:!0,configurable:!0,writable:!0}):r[u]=i,r):null,err:null});var r,u,i}).catch(function(e){return console.error("error",e.stack||e)||t.on("in",{"@":n,put:null,err:e})})}),t.on("put",function(e){this.to.next(e);var n=e["#"];r.write(e.put).then(function(){return t.on("in",{"#":n,ok:!0,err:null})}).catch(function(e){return t.on("in",{"#":n,ok:!1,err:e})})})})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ndW4tcmVkaXMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL2d1bi1yZWRpcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ndW4tcmVkaXMvZXh0ZXJuYWwgXCJyYW1kYVwiIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vZ3VuLXJlZGlzLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9yZWNlaXZlci5qcyIsIndlYnBhY2s6Ly9ndW4tcmVkaXMvZXh0ZXJuYWwgXCJyZWRpc1wiIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9zZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vZ3VuLXJlZGlzL2V4dGVybmFsIFwiZmxhdFwiIiwid2VicGFjazovL2d1bi1yZWRpcy8uL3NyYy9ndW4uanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNl9fIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9yYW1kYSIsIl9yZWRpcyIsIl9zZXJpYWxpemUiLCJtZXRhUmUiLCJlZGdlUmUiLCJHdW4iLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY29uZmlnIiwiQXJyYXkiLCJfa2V5IiwicmVkaXMiLCJjcmVhdGVDbGllbnQiLCJhcHBseSIsInNvdWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImhnZXRhbGwiLCJlcnIiLCJyZXMiLCJjb25zb2xlIiwiZXJyb3IiLCJmcm9tUmVkaXMiLCJyZWFkIiwidGhlbiIsInJhd0RhdGEiLCJkYXRhIiwiU0VBIiwiaW5kZXhPZiIsImtleXMiLCJmb3JFYWNoIiwidmVyaWZ5Iiwib3B0IiwicGFjayIsInVucGFjayIsImJhdGNoZWRHZXQiLCJjYiIsImhrZXlzIiwibm9kZUtleXMiLCJzdGFjayIsImxvZyIsImF0dHJLZXlzIiwiZmlsdGVyIiwibWF0Y2giLCJyZWFkTmV4dEJhdGNoIiwib2siLCJmYWlsIiwiYmF0Y2giLCJzcGxpY2UiLCJiYXRjaE1ldGEiLCJtYXAiLCJjb25jYXQiLCJyZXBsYWNlIiwiaG1nZXQiLCJtZXRhIiwib2JqIiwiXy4jIiwidmFsIiwiaWR4IiwicmVzdWx0IiwiZG9uZSIsImNhdGNoIiwid3JpdGUiLCJwdXQiLCJhbGwiLCJub2RlIiwicGF0aCIsIndyaXRlTmV4dEJhdGNoIiwidXBkYXRlcyIsInRvUmVkaXMiLCJfIiwiIyIsIj4iLCJwaWNrIiwiaG1zZXQiLCJyZWNlaXZlckZucyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2d1biIsInJlY2VpdmVyIiwiX2NsaWVudCIsImRiIiwib25JbiIsIm1zZyIsImZyb20iLCJqc29uIiwiZGVkdXBJZCIsInByb3AiLCJtc2dJZCIsIkAiLCJ1bmRlZmluZWQiLCJzZW5kIiwiaWdub3JlTGVlY2hpbmciLCJza2lwVmFsaWRhdGlvbiIsInNvcnRlZCIsInRlc3QiLCJwYXJzZUZsb2F0IiwiRklFTERfU0laRV9MSU1JVCIsInNsaWNlIiwiYXJyb3ciLCJfdHlwZW9mIiwidmFsS2V5cyIsInJlbWFpbmRlciIsInJlYWxLZXkiLCJqb2luIiwicmVhbFZhbHVlIiwicG9zdFVuZmxhdHRlbiIsImZsYXR0ZW4iLCJ1bmZsYXR0ZW4iLCJzb3J0Iiwib24iLCJ0byIsIm5leHQiLCJyZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGlCQUFBQyxTQUFBLGlCQUFBQyxPQUNBQSxPQUFBRCxRQUFBRCxFQUFBRyxRQUFBLFNBQUFBLFFBQUEsU0FBQUEsUUFBQSxTQUNBLG1CQUFBQyxlQUFBQyxJQUNBRCxPQUFBLHFDQUFBSixHQUNBLGlCQUFBQyxRQUNBQSxRQUFBLGFBQUFELEVBQUFHLFFBQUEsU0FBQUEsUUFBQSxTQUFBQSxRQUFBLFNBRUFKLEVBQUEsYUFBQUMsRUFBQUQsRUFBQSxNQUFBQSxFQUFBLE1BQUFBLEVBQUEsTUFSQSxDQVNDLG9CQUFBTyxVQUFBQyxLQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0QsbUJDVEEsSUFBQUMsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBWixRQUdBLElBQUFDLEVBQUFTLEVBQUFFLEdBQUEsQ0FDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUNBZCxRQUFBLElBVUEsT0FOQWUsRUFBQUgsR0FBQUksS0FBQWYsRUFBQUQsUUFBQUMsSUFBQUQsUUFBQVcsR0FHQVYsRUFBQWEsR0FBQSxFQUdBYixFQUFBRCxRQTBEQSxPQXJEQVcsRUFBQU0sRUFBQUYsRUFHQUosRUFBQU8sRUFBQVIsRUFHQUMsRUFBQVEsRUFBQSxTQUFBbkIsRUFBQW9CLEVBQUFDLEdBQ0FWLEVBQUFXLEVBQUF0QixFQUFBb0IsSUFDQUcsT0FBQUMsZUFBQXhCLEVBQUFvQixFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDVixFQUFBZ0IsRUFBQSxTQUFBM0IsR0FDQSxvQkFBQTRCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUF4QixFQUFBNEIsT0FBQUMs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QixHQUMxRHpILEtBQUt1SixHQUFHQyxLQUFLL0IsR0FDYixJQUFNdEUsRUFBUVAsRUFBSU8sTUFBUXNFLEVBQUd0RSxPQUFRLEVBQUFxRSxFQUFBcEUsY0FBYVIsR0FFbEQ2RSxFQUFHNkIsR0FBRyxNQUFPLFNBQVNHLEdBQ3BCekosS0FBS3VKLEdBQUdDLEtBQUtDLEdBQ2IsSUFBTTNCLEVBQVUyQixFQUFRLEtBRWxCbkcsRUFETW1HLEVBQVFySSxJQUNILEtBRWpCK0IsRUFBTXlCLFdBQVd0QixFQUFNLFNBQUE4QyxHQUFNLE9BQUlxQixFQUFHNkIsR0FBRyxLQUFNLENBQzNDckIsSUFBS0gsRUFDTHRCLElBQUtKLEtBQU0sS0FBTTlDLElBQU84QyxrR0FBVyxLQUNuQ3pDLElBQUssbUJBQ0gyQyxNQUFNLFNBQUEzQyxHQUFHLE9BQ1hFLFFBQVFDLE1BQU0sUUFBU0gsRUFBSXFCLE9BQVNyQixJQUNwQzhELEVBQUc2QixHQUFHLEtBQU0sQ0FDVnJCLElBQUtILEVBQ0x0QixJQUFLLEtBQ0w3QyxZQUtOOEQsRUFBRzZCLEdBQUcsTUFBTyxTQUFTRyxHQUNwQnpKLEtBQUt1SixHQUFHQyxLQUFLQyxHQUNiLElBQU0zQixFQUFVMkIsRUFBUSxLQUV4QnRHLEVBQU1vRCxNQUFNa0QsRUFBUWpELEtBQ2pCdkMsS0FBSyxrQkFDSndELEVBQUc2QixHQUFHLEtBQU0sQ0FDVnRDLElBQUtjLEVBQ0x4QyxJQUFJLEVBQ0ozQixJQUFLLFNBR1IyQyxNQUFNLFNBQUEzQyxHQUFHLE9BQ1I4RCxFQUFHNkIsR0FBRyxLQUFNLENBQ1Z0QyxJQUFLYyxFQUNMeEMsSUFBSSxFQUNKM0IsSUFBS0EiLCJmaWxlIjoiZ3VuLXJlZGlzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcInJhbWRhXCIpLCByZXF1aXJlKFwicmVkaXNcIiksIHJlcXVpcmUoXCJmbGF0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiZ3VuLXJlZGlzXCIsIFtcInJhbWRhXCIsIFwicmVkaXNcIiwgXCJmbGF0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImd1bi1yZWRpc1wiXSA9IGZhY3RvcnkocmVxdWlyZShcInJhbWRhXCIpLCByZXF1aXJlKFwicmVkaXNcIiksIHJlcXVpcmUoXCJmbGF0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJndW4tcmVkaXNcIl0gPSBmYWN0b3J5KHJvb3RbXCJyYW1kYVwiXSwgcm9vdFtcInJlZGlzXCJdLCByb290W1wiZmxhdFwiXSk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzRfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNl9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187IiwiaW1wb3J0IHsga2V5cywgcGF0aCwgcGljayB9IGZyb20gXCJyYW1kYVwiO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IGFzIGNyZWF0ZVJlZGlzQ2xpZW50IH0gZnJvbSBcInJlZGlzXCI7XG5pbXBvcnQgeyB0b1JlZGlzLCBmcm9tUmVkaXMgfSBmcm9tIFwiLi9zZXJpYWxpemVcIjtcblxuY29uc3QgR0VUX0JBVENIX1NJWkUgPSAxMDAwMDtcbmNvbnN0IFBVVF9CQVRDSF9TSVpFID0gMTAwMDA7XG5cbmNvbnN0IG1ldGFSZSA9IC9eX1xcLi4qLztcbmNvbnN0IGVkZ2VSZSA9IC8oXFwuIyQpLztcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNsaWVudCA9IChHdW4sIC4uLmNvbmZpZykgPT4ge1xuICBjb25zdCByZWRpcyA9IGNyZWF0ZVJlZGlzQ2xpZW50KC4uLmNvbmZpZyk7XG5cbiAgY29uc3QgZ2V0ID0gc291bCA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghc291bCkgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgICByZWRpcy5oZ2V0YWxsKHNvdWwsIGZ1bmN0aW9uKGVyciwgcmVzKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZ2V0IGVycm9yXCIsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShmcm9tUmVkaXMocmVzKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICBjb25zdCByZWFkID0gc291bCA9PlxuICAgIGdldChzb3VsKS50aGVuKHJhd0RhdGEgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IHJhd0RhdGEgPyB7IC4uLnJhd0RhdGEgfSA6IHJhd0RhdGE7XG5cbiAgICAgIGlmICghR3VuLlNFQSB8fCBzb3VsLmluZGV4T2YoXCJ+XCIpID09PSAtMSkgcmV0dXJuIHJhd0RhdGE7XG4gICAgICBrZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgR3VuLlNFQS52ZXJpZnkoXG4gICAgICAgICAgR3VuLlNFQS5vcHQucGFjayhyYXdEYXRhW2tleV0sIGtleSwgcmF3RGF0YSwgc291bCksXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgcmVzID0+IChkYXRhW2tleV0gPSBHdW4uU0VBLm9wdC51bnBhY2socmVzLCBrZXksIHJhd0RhdGEpKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KTtcblxuICBjb25zdCBiYXRjaGVkR2V0ID0gKHNvdWwsIGNiKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJlZGlzLmhrZXlzKHNvdWwsIChlcnIsIG5vZGVLZXlzKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZXJyb3JcIiwgZXJyLnN0YWNrIHx8IGVycik7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlS2V5cy5sZW5ndGggPD0gR0VUX0JBVENIX1NJWkUpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0KHNvdWwpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIGNiKHJlcyk7XG4gICAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJnZXQgYmlnIHNvdWxcIiwgc291bCwgbm9kZUtleXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgYXR0cktleXMgPSBub2RlS2V5cy5maWx0ZXIoa2V5ID0+ICFrZXkubWF0Y2gobWV0YVJlKSk7XG4gICAgICAgIGNvbnN0IHJlYWRCYXRjaCA9ICgpID0+XG4gICAgICAgICAgbmV3IFByb21pc2UoKG9rLCBmYWlsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBiYXRjaCA9IGF0dHJLZXlzLnNwbGljZSgwLCBHRVRfQkFUQ0hfU0laRSk7XG5cbiAgICAgICAgICAgIGlmICghYmF0Y2gubGVuZ3RoKSByZXR1cm4gb2sodHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCBiYXRjaE1ldGEgPSBiYXRjaC5tYXAoa2V5ID0+XG4gICAgICAgICAgICAgIGBfLj4uJHtrZXl9YC5yZXBsYWNlKGVkZ2VSZSwgXCJcIilcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiByZWRpcy5obWdldChzb3VsLCBiYXRjaE1ldGEsIChlcnIsIG1ldGEpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiaG1nZXQgZXJyXCIsIGVyci5zdGFjayB8fCBlcnIpIHx8IGZhaWwoZXJyKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICAgIFwiXy4jXCI6IHNvdWxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBtZXRhLmZvckVhY2goKHZhbCwgaWR4KSA9PiAob2JqW2JhdGNoTWV0YVtpZHhdXSA9IHZhbCkpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVkaXMuaG1nZXQoc291bCwgYmF0Y2gsIChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJobWdldCBlcnJcIiwgZXJyLnN0YWNrIHx8IGVycikgfHwgZmFpbChlcnIpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXMuZm9yRWFjaCgodmFsLCBpZHgpID0+IChvYmpbYmF0Y2hbaWR4XV0gPSB2YWwpKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmcm9tUmVkaXMob2JqKTtcblxuICAgICAgICAgICAgICAgIGNiKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9rKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlYWROZXh0QmF0Y2ggPSAoKSA9PlxuICAgICAgICAgIHJlYWRCYXRjaCgpLnRoZW4oZG9uZSA9PiAhZG9uZSAmJiByZWFkTmV4dEJhdGNoKTtcblxuICAgICAgICByZXR1cm4gcmVhZE5leHRCYXRjaCgpXG4gICAgICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgY29uc3Qgd3JpdGUgPSBwdXQgPT5cbiAgICBQcm9taXNlLmFsbChcbiAgICAgIGtleXMocHV0KS5tYXAoXG4gICAgICAgIHNvdWwgPT5cbiAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gcHV0W3NvdWxdO1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IHBhdGgoW1wiX1wiLCBcIj5cIl0sIG5vZGUpIHx8IHt9O1xuICAgICAgICAgICAgY29uc3Qgbm9kZUtleXMgPSBrZXlzKG1ldGEpO1xuICAgICAgICAgICAgY29uc3Qgd3JpdGVOZXh0QmF0Y2ggPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGJhdGNoID0gbm9kZUtleXMuc3BsaWNlKDAsIFBVVF9CQVRDSF9TSVpFKTtcblxuICAgICAgICAgICAgICBpZiAoIWJhdGNoLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgICBjb25zdCB1cGRhdGVzID0gdG9SZWRpcyh7XG4gICAgICAgICAgICAgICAgXzoge1xuICAgICAgICAgICAgICAgICAgXCIjXCI6IHNvdWwsXG4gICAgICAgICAgICAgICAgICBcIj5cIjogcGljayhiYXRjaCwgbWV0YSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC4uLnBpY2soYmF0Y2gsIG5vZGUpXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHJlZGlzLmhtc2V0KHNvdWwsIHRvUmVkaXModXBkYXRlcyksIGVyciA9PlxuICAgICAgICAgICAgICAgIGVyciA/IHJlamVjdChlcnIpIDogd3JpdGVOZXh0QmF0Y2goKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHdyaXRlTmV4dEJhdGNoKCk7XG4gICAgICAgICAgfSlcbiAgICAgIClcbiAgICApO1xuXG4gIHJldHVybiB7IGdldCwgcmVhZCwgYmF0Y2hlZEdldCwgd3JpdGUgfTtcbn07XG4iLCJpbXBvcnQgKiBhcyByZWNlaXZlckZucyBmcm9tIFwiLi9yZWNlaXZlclwiO1xuZXhwb3J0IHsgYXR0YWNoVG9HdW4gfSBmcm9tIFwiLi9ndW5cIjtcblxuZXhwb3J0IGNvbnN0IHJlY2VpdmVyID0gcmVjZWl2ZXJGbnM7XG4iLCJpbXBvcnQgeyBwYXRoLCBwcm9wIH0gZnJvbSBcInJhbWRhXCI7XG5pbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tIFwiLi9jbGllbnRcIjtcblxuZXhwb3J0IGNvbnN0IHJlc3BvbmRUb0dldHMgPSBHdW4gPT4gZGIgPT4ge1xuICBjb25zdCByZWRpcyA9IGNyZWF0ZUNsaWVudChHdW4pO1xuXG4gIGRiLm9uSW4obXNnID0+IHtcbiAgICBjb25zdCB7IGZyb20sIGpzb24gfSA9IG1zZztcbiAgICBjb25zdCBzb3VsID0gcGF0aChbXCJnZXRcIiwgXCIjXCJdLCBqc29uKTtcbiAgICBjb25zdCBkZWR1cElkID0gcHJvcChcIiNcIiwganNvbik7XG5cbiAgICBpZiAoIXNvdWwpIHJldHVybiBtc2c7XG4gICAgcmV0dXJuIHJlZGlzXG4gICAgICAuYmF0Y2hlZEdldChzb3VsLCByZXN1bHQgPT4ge1xuICAgICAgICBjb25zdCBqc29uID0ge1xuICAgICAgICAgIFwiI1wiOiBmcm9tLm1zZ0lkKCksXG4gICAgICAgICAgXCJAXCI6IGRlZHVwSWQsXG4gICAgICAgICAgcHV0OiB7IFtzb3VsXTogcmVzdWx0IHx8IHVuZGVmaW5lZCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnJvbS5zZW5kKHsganNvbiwgaWdub3JlTGVlY2hpbmc6IHRydWUsIHNraXBWYWxpZGF0aW9uOiAhcmVzdWx0IH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zdCBqc29uID0ge1xuICAgICAgICAgIFwiI1wiOiBmcm9tLm1zZ0lkKCksXG4gICAgICAgICAgXCJAXCI6IGRlZHVwSWQsXG4gICAgICAgICAgZXJyOiBgJHtlcnJ9YFxuICAgICAgICB9O1xuXG4gICAgICAgIGZyb20uc2VuZCh7IGpzb24sIGlnbm9yZUxlZWNoaW5nOiB0cnVlLCBza2lwVmFsaWRhdGlvbjogdHJ1ZSB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiBtc2cpO1xuICB9KTtcblxuICByZXR1cm4gZGI7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX180X187IiwiaW1wb3J0IHsga2V5cyB9IGZyb20gXCJyYW1kYVwiO1xuY29uc3QgZmxhdHRlbiA9IHJlcXVpcmUoXCJmbGF0XCIpO1xuXG5jb25zdCBGSUVMRF9TSVpFX0xJTUlUID0gMTAwMDAwO1xuXG5mdW5jdGlvbiBwb3N0VW5mbGF0dGVuKG9iaikge1xuICAvLyBUaGlzIGlzIHByb2JhYmx5IG9ubHkgbmVjZXNzYXJ5IGlmIHlvdSBhcmUgc3R1cGlkIGxpa2UgbWUgYW5kIHVzZSB0aGUgZGVmYXVsdCAuIGRlbGltaXRlciBmb3IgZmxhdHRlblxuICBpZiAoIW9iaikgcmV0dXJuIG9iajtcbiAgbGV0IGFycm93ID0gKG9iai5fICYmIG9iai5fW1wiPlwiXSkgfHwge307XG5cbiAga2V5cyhhcnJvdykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBsZXQgdmFsdWUgPSBhcnJvd1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgbGV0IHZhbEtleXMgPSBrZXlzKHZhbHVlKTtcbiAgICAgIGxldCByZW1haW5kZXIgPSB2YWxLZXlzWzBdO1xuXG4gICAgICBpZiAocmVtYWluZGVyKSB7XG4gICAgICAgIGxldCByZWFsS2V5ID0gW2tleSwgdmFsS2V5c10uam9pbihcIi5cIik7XG4gICAgICAgIGxldCByZWFsVmFsdWUgPSB2YWx1ZVtyZW1haW5kZXJdO1xuXG4gICAgICAgIGRlbGV0ZSBhcnJvd1trZXldO1xuICAgICAgICBhcnJvd1tyZWFsS2V5XSA9IHJlYWxWYWx1ZTtcbiAgICAgICAgcmVhbFZhbHVlID0gKG9ialtrZXldICYmIG9ialtrZXldW3JlbWFpbmRlcl0pIHx8IG51bGw7XG4gICAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgICAgb2JqW3JlYWxLZXldID0gcmVhbFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGtleXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGtleVswXSA9PT0gXCIuXCIpIGRlbGV0ZSBba2V5XTtcbiAgfSk7XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlZGlzKG9iaikge1xuICBpZiAoIW9iaikgcmV0dXJuIG9iajtcbiAgY29uc3Qgc29ydGVkID0ge307XG5cbiAga2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleVswXSA9PT0gXCIuXCIpIGRlbGV0ZSBvYmpba2V5XTtcblxuICAgIGlmIChvYmpba2V5XSA9PT0gXCJ8TlVMTHxcIikge1xuICAgICAgb2JqW2tleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAob2JqW2tleV0gPT09IFwifFVOREVGSU5FRHxcIikge1xuICAgICAgb2JqW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKC8+XFwuLy50ZXN0KGtleSkpIHtcbiAgICAgIG9ialtrZXldID0gcGFyc2VGbG9hdChvYmpba2V5XSwgMTApIHx8IG9ialtrZXldO1xuICAgIH1cbiAgICBpZiAob2JqW2tleV0gJiYgb2JqW2tleV0ubGVuZ3RoID4gRklFTERfU0laRV9MSU1JVCkge1xuICAgICAgb2JqW2tleV0gPSBvYmpba2V5XS5zbGljZSgwLCBGSUVMRF9TSVpFX0xJTUlUKTtcbiAgICAgIGNvbnNvbGUubG9nKFwidHJ1bmNhdGVkXCIsIGtleSk7XG4gICAgfVxuICB9KTtcblxuICBvYmogPSBwb3N0VW5mbGF0dGVuKGZsYXR0ZW4udW5mbGF0dGVuKG9iaikpO1xuXG4gIE9iamVjdC5rZXlzKG9iailcbiAgICAuc29ydCgpXG4gICAgLmZvckVhY2goa2V5ID0+IChzb3J0ZWRba2V5XSA9IG9ialtrZXldKSk7XG5cbiAgcmV0dXJuIHNvcnRlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmVkaXMob2JqKSB7XG4gIGlmICghb2JqKSByZXR1cm4gb2JqO1xuICBvYmogPSBmbGF0dGVuKG9iaik7XG4gIGtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgb2JqW2tleV0gPSBcInxOVUxMfFwiO1xuICAgIH1cbiAgICBpZiAob2JqW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqW2tleV0gPSBcInxVTkRFRklORUR8XCI7XG4gICAgfVxuICAgIGlmIChvYmpba2V5XSAmJiBvYmpba2V5XS5sZW5ndGggPiBGSUVMRF9TSVpFX0xJTUlUKSB7XG4gICAgICBvYmpba2V5XSA9IG9ialtrZXldLnNsaWNlKDAsIEZJRUxEX1NJWkVfTElNSVQpO1xuICAgICAgY29uc29sZS5sb2coXCJ0cnVuY2F0ZWQgaW5wdXRcIiwga2V5KTtcbiAgICB9XG4gICAgaWYgKGtleVswXSA9PT0gXCIuXCIpIGRlbGV0ZSBvYmpba2V5XTtcbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzZfXzsiLCJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tIFwiLi9jbGllbnRcIjtcblxuZXhwb3J0IGNvbnN0IGF0dGFjaFRvR3VuID0gR3VuID0+IEd1bi5vbihcImNyZWF0ZVwiLCBmdW5jdGlvbihkYikge1xuICB0aGlzLnRvLm5leHQoZGIpO1xuICBjb25zdCByZWRpcyA9IEd1bi5yZWRpcyA9IGRiLnJlZGlzID0gY3JlYXRlQ2xpZW50KEd1bik7XG5cbiAgZGIub24oXCJnZXRcIiwgZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHRoaXMudG8ubmV4dChyZXF1ZXN0KTtcbiAgICBjb25zdCBkZWR1cElkID0gcmVxdWVzdFtcIiNcIl07XG4gICAgY29uc3QgZ2V0ID0gcmVxdWVzdC5nZXQ7XG4gICAgY29uc3Qgc291bCA9IGdldFtcIiNcIl07XG5cbiAgICByZWRpcy5iYXRjaGVkR2V0KHNvdWwsIHJlc3VsdCA9PiBkYi5vbihcImluXCIsIHtcbiAgICAgIFwiQFwiOiBkZWR1cElkLFxuICAgICAgcHV0OiByZXN1bHQgPyB7IFtzb3VsXTogcmVzdWx0IH0gOiBudWxsLFxuICAgICAgZXJyOiBudWxsXG4gICAgfSkpLmNhdGNoKGVyciA9PlxuICAgICAgY29uc29sZS5lcnJvcihcImVycm9yXCIsIGVyci5zdGFjayB8fCBlcnIpIHx8XG4gICAgICBkYi5vbihcImluXCIsIHtcbiAgICAgICAgXCJAXCI6IGRlZHVwSWQsXG4gICAgICAgIHB1dDogbnVsbCxcbiAgICAgICAgZXJyXG4gICAgICB9KVxuICAgICk7XG4gIH0pO1xuXG4gIGRiLm9uKFwicHV0XCIsIGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgICB0aGlzLnRvLm5leHQocmVxdWVzdCk7XG4gICAgY29uc3QgZGVkdXBJZCA9IHJlcXVlc3RbXCIjXCJdO1xuXG4gICAgcmVkaXMud3JpdGUocmVxdWVzdC5wdXQpXG4gICAgICAudGhlbigoKSA9PlxuICAgICAgICBkYi5vbihcImluXCIsIHtcbiAgICAgICAgICBcIiNcIjogZGVkdXBJZCxcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBlcnI6IG51bGxcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC5jYXRjaChlcnIgPT5cbiAgICAgICAgZGIub24oXCJpblwiLCB7XG4gICAgICAgICAgXCIjXCI6IGRlZHVwSWQsXG4gICAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICAgIGVycjogZXJyXG4gICAgICAgIH0pXG4gICAgICApO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==